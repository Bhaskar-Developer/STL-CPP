Vectors are same as dynamic arrays with the ability to resize itself automatically when an element is inserted or deleted. The storage of the vector is automatically handeled by the container.

Iterators for Vector:

begin(): This returns an iterator/pointer pointing to first element of the vector.
end(): This returns an iterator/pointer pointing at the theoritical element that follows the last element of the vector.

rbegin(): This is reverse begin. This returns a pointer pointing to last element in vector. This can be used for reverse iteration. i.e iterating from back to front.

rend(): This is reverse pointer that points to theoritical element that is present before the first element of the vector.

cbegin(): This returns a constant pointor that points to the first element of the vector.

cend(): This returns a constant pointer that points to the theoritical element that is present next to the last element of the vector.

crbegin(): Its a constant reverse pointer. Points to last element.

crend(): A constsant reverse pointer that points to the theoritical element that is present before the first element.

Note: All constant iterators cannot modify the contents of the vector in any way.
      Iterators are only used to iterate an modify existing vector. They are not used to initialize vectors with values.

functions that deal with capacity of Vectors: 

size(): this returns the number of elements in the vector.
max_size(): returns the max number of elements the vector can hold.
capacity(): returns the size of the storage space currently allocated to the vector that is expressed as number of elements.
resize(n): used to resize the vector container so that it contains n elements.
empty(): returns whether container is empty.
shrink_to_fit(): reduces the capacity of the container to fit its size and destroys all elements beyond the capacity.
reserve():requests that the vector capacity be at least enough to contain n elements

Functions that deal with element access of the vector:
reference_operator[g]: returns reference to element g in the vector.
at(g): returns a reference to the element at position g in the vector.
front(): returns reference to the first element in the vector.
back(): returns reference to the last element in the vector.
data(): returns a direct pointer to the memory array used internally by the vector to store its owned elements.

Functions that deal with modifications to the vector container:
assign(): it assigns new values to the vector elements by replacing old ones.
push_back(): it pushes an element into the vector from the back.
pop_back(): it is used to remove elements from the vector from the back.
insert(): it inserts a new element before the element at the specified position.
erase(): it is used to remove elements from a container from the specified position or range.
swap(): it is ued to swap contents of one vector with another vector of same type. Sizes may differ.
clear(): it is used to remove all emements of a vector container.
emplace(): it extends the container by inserting new element at the first position?
emplace_back(): it is used to insert a new element into the vector container, the new element is added at the end of the vector.


